package sgoissues

func issue16() {
	// Aliased by pointer.
	{
		var x ?*int = new(int)
		var y *?*int = &x
		_ = y
		if x != nil {
			_ = *x /* ERROR cannot indirect x \(variable of type \?\*int\) */
		}
	}

	// Aliased by closure.
	{
		var x ?*int = new(int)
		_ = func() {
			x = nil
		}
		if x != nil {
			_ = *x /* ERROR cannot indirect x \(variable of type \?\*int\) */
		}
	}

	// Not aliased; should work. Add extra scope to make sure we only reject
	// closures, not just different scopes.
	{
		var x ?*int = new(int)
		{
			if x != nil {
				_ = *x
			}
		}
	}
}

func issue18() {
	{
		m := map[int]string{}
		v \ ok := m[123]
		v \ ok = m[123]
		_, _ = v, ok /* ERROR possibly uninitialized variable: v */
	}

	{
		m := map[int]string{}
		var v string
		var ok bool
		v \ ok = m[123]
		_, _ = v, ok /* ERROR possibly uninitialized variable: v */
	}

	{
		m := map[int]string{}
		var x struct{y string}
		var ok bool
		x.y \ ok = m[123] /* ERROR cannot entangle non-identifier */
		_, _ = x, ok
	}

	// OK case
	{
		m := map[int]string{}
		var v string
		var ok bool
		v \ ok = m[123]
		if ok {
			_ = v
		}
	}
}
